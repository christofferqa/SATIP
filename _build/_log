### Starting build.
# Target: src/main.ml.depends, tags: { extension:ml, file:src/main.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/main.ml > src/main.ml.depends
# Target: src/astpp.ml.depends, tags: { extension:ml, file:src/astpp.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/astpp.ml > src/astpp.ml.depends
# Target: src/ast.ml.depends, tags: { extension:ml, file:src/ast.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/ast.ml > src/ast.ml.depends
# Target: src/ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/ast.cmo, file:src/ast.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/ast.cmo src/ast.ml
# Target: src/environment.ml.depends, tags: { extension:ml, file:src/environment.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/environment.ml > src/environment.ml.depends
# Target: src/error.ml.depends, tags: { extension:ml, file:src/error.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/error.ml > src/error.ml.depends
# Target: src/error.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/error.cmo, file:src/error.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/error.cmo src/error.ml
# Target: src/lexer.mll, tags: { extension:mll, file:src/lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex -q src/lexer.mll
# Target: src/lexer.ml.depends, tags: { extension:ml, file:src/lexer.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/lexer.ml > src/lexer.ml.depends
# Target: src/parser.mly.depends, tags: { extension:mly, file:src/parser.mly, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir -v --raw-depend --ocamldep 'ocamldep -modules' src/parser.mly > src/parser.mly.depends
# Target: src/parser.mly, tags: { extension:mly, file:src/parser.mly, menhir, ocaml, parser, quiet }
menhir -v --ocamlc 'ocamlc -I src' --infer src/parser.mly
# Target: src/parser.mli.depends, tags: { extension:mli, file:src/parser.mli, ocaml, ocamldep, quiet }
ocamldep -modules src/parser.mli > src/parser.mli.depends
# Target: src/parser.cmi, tags: { byte, compile, extension:mli, file:src/parser.mli, interf, ocaml, quiet }
ocamlc -c -I src -o src/parser.cmi src/parser.mli
# Target: src/astpp.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/astpp.cmo, file:src/astpp.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/astpp.cmo src/astpp.ml
# Target: src/environment.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/environment.cmo, file:src/environment.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/environment.cmo src/environment.ml
# Target: src/lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/lexer.cmo, file:src/lexer.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/lexer.cmo src/lexer.ml
# Target: src/main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/main.cmo, file:src/main.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/main.cmo src/main.ml
+ ocamlc -c -I src -o src/main.cmo src/main.ml
File "src/main.ml", line 54, characters 5-9:
Warning 26: unused variable tenv.
# Target: src/parser.ml.depends, tags: { extension:ml, file:src/parser.ml, ocaml, ocamldep, quiet }
ocamldep -modules src/parser.ml > src/parser.ml.depends
# Target: src/parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/parser.cmo, file:src/parser.ml, implem, ocaml, quiet }
ocamlc -c -I src -o src/parser.cmo src/parser.ml
# Target: src/main.byte, tags: { byte, dont_link_with, extension:byte, file:src/main.byte, link, ocaml, program, quiet }
ocamlc src/ast.cmo src/astpp.cmo src/error.cmo src/environment.cmo src/parser.cmo src/lexer.cmo src/main.cmo -o src/main.byte
# Compilation successful.
