# 2 "src/lexer.mll"
 
  open Parser
  
  let get = Lexing.lexeme
    
  let keyword_table = Hashtbl.create 53

  let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
      ["else",   ELSE;
       "if",     IF;
       "input",  INPUT;
       "malloc", MALLOC;
       "null",   NULL;
       "output", OUTPUT;
       "return", RETURN;
       "var",    VAR;
       "while",  WHILE ]

  let tok_as_string t = match t with
	  | EOF -> "eof"
		
    | ELSE -> "else"
    | IF -> "if"
    | INPUT -> "input"
    | MALLOC -> "malloc"
    | NULL -> "null"
    | OUTPUT -> "output"
    | RETURN -> "return"
    | VAR -> "var"
    | WHILE -> "while"
      
    (* Delimiters *)
    | L_PAREN -> "("
    | R_PAREN -> ")"
    | L_BRACE -> "{"
    | R_BRACE -> "}"
    | SEMICOLON -> ";"
    | COMMA -> ","
      
    (* Assignment and logic *)
    | ASSIGN -> "="
      
    (* Comparison *)
    | GT -> ">"
    | EQ -> "=="

    (* Arithmetic *)
    | PLUS -> "+"
    | MINUS -> "-"
    | STAR -> "*"
    | DIV -> "/"

    (* Pointer arithmetic *)
		| AMP -> "&"
		
    (* Literals and identifiers *)
    | INTEGER_LITERAL i -> "INTEGER_LITERAL" ^ i
    | IDENTIFIER s -> s (*"IDENTIFIER("^s^")"*)

# 63 "src/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\001\001\017\000\233\255\234\255\236\255\237\255\238\255\
    \240\255\014\000\242\255\243\255\244\255\245\255\246\255\247\255\
    \034\000\026\000\253\255\254\255\255\255\067\000\069\000\250\255\
    \251\255\068\000\252\255\073\000\248\255\239\255\074\000\252\255\
    \075\000\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\023\000\022\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\014\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\002\000\255\255\255\255\255\255\006\000\255\255\255\255\
    \255\255\003\000\255\255\007\000\255\255\255\255\255\255\255\255\
    \002\000\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\001\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\021\000\024\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\031\000\000\000\
    \255\255\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\018\000\255\255\019\000\017\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\255\255\255\255\255\255\018\000\255\255\004\000\255\255\
    \015\000\014\000\005\000\007\000\010\000\006\000\255\255\016\000\
    \003\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\255\255\011\000\255\255\009\000\008\000\255\255\
    \255\255\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\029\000\022\000\028\000\026\000\026\000\
    \027\000\021\000\025\000\028\000\033\000\033\000\000\000\032\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\013\000\255\255\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255";
  Lexing.lex_check = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\009\000\016\000\021\000\025\000\022\000\
    \021\000\016\000\022\000\027\000\030\000\032\000\255\255\030\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\000\
    \255\255\255\255\255\255\255\255\030\000\255\255\255\255\255\255\
    \255\255\030\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\255\255\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\255\255\021\000\255\255\022\000\255\255\255\255\
    \255\255\255\255\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\001\000\001\000\001\000\
    \255\255\001\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\255\255\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\255\255\001\000\
    \001\000\001\000\001\000\255\255\001\000\001\000\001\000\001\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 104 "src/lexer.mll"
           ( EOF )
# 236 "src/lexer.ml"

  | 1 ->
# 107 "src/lexer.mll"
                                    ( token lexbuf )
# 241 "src/lexer.ml"

  | 2 ->
# 108 "src/lexer.mll"
                                    ( Lexing.new_line lexbuf; token lexbuf )
# 246 "src/lexer.ml"

  | 3 ->
# 109 "src/lexer.mll"
                                    ( inside_comment false lexbuf )
# 251 "src/lexer.ml"

  | 4 ->
# 110 "src/lexer.mll"
                                    ( inside_comment false lexbuf )
# 256 "src/lexer.ml"

  | 5 ->
# 111 "src/lexer.mll"
                                    ( inside_comment true lexbuf )
# 261 "src/lexer.ml"

  | 6 ->
# 113 "src/lexer.mll"
                                    ( token lexbuf )
# 266 "src/lexer.ml"

  | 7 ->
# 115 "src/lexer.mll"
                                    ( Lexing.new_line lexbuf; token lexbuf )
# 271 "src/lexer.ml"

  | 8 ->
# 118 "src/lexer.mll"
                    ( L_PAREN )
# 276 "src/lexer.ml"

  | 9 ->
# 119 "src/lexer.mll"
                    ( R_PAREN )
# 281 "src/lexer.ml"

  | 10 ->
# 120 "src/lexer.mll"
                    ( L_BRACE )
# 286 "src/lexer.ml"

  | 11 ->
# 121 "src/lexer.mll"
                    ( R_BRACE )
# 291 "src/lexer.ml"

  | 12 ->
# 122 "src/lexer.mll"
                    ( SEMICOLON )
# 296 "src/lexer.ml"

  | 13 ->
# 123 "src/lexer.mll"
                    ( COMMA )
# 301 "src/lexer.ml"

  | 14 ->
# 126 "src/lexer.mll"
                    ( ASSIGN )
# 306 "src/lexer.ml"

  | 15 ->
# 129 "src/lexer.mll"
                    ( GT )
# 311 "src/lexer.ml"

  | 16 ->
# 130 "src/lexer.mll"
                    ( EQ )
# 316 "src/lexer.ml"

  | 17 ->
# 133 "src/lexer.mll"
                    ( PLUS )
# 321 "src/lexer.ml"

  | 18 ->
# 134 "src/lexer.mll"
                    ( MINUS )
# 326 "src/lexer.ml"

  | 19 ->
# 135 "src/lexer.mll"
                    ( STAR )
# 331 "src/lexer.ml"

  | 20 ->
# 136 "src/lexer.mll"
                    ( DIV )
# 336 "src/lexer.ml"

  | 21 ->
# 139 "src/lexer.mll"
             ( AMP )
# 341 "src/lexer.ml"

  | 22 ->
let
# 142 "src/lexer.mll"
                       i
# 347 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 142 "src/lexer.mll"
                         ( INTEGER_LITERAL i )
# 351 "src/lexer.ml"

  | 23 ->
let
# 143 "src/lexer.mll"
                                       id
# 357 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 143 "src/lexer.mll"
                                          ( try Hashtbl.find keyword_table id with Not_found -> IDENTIFIER id )
# 361 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and inside_comment laststar lexbuf =
    __ocaml_lex_inside_comment_rec laststar lexbuf 30
and __ocaml_lex_inside_comment_rec laststar lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 148 "src/lexer.mll"
                                   ( if laststar
                                     then token lexbuf
                                     else inside_comment false lexbuf )
# 374 "src/lexer.ml"

  | 1 ->
# 151 "src/lexer.mll"
                                   ( inside_comment true lexbuf )
# 379 "src/lexer.ml"

  | 2 ->
# 152 "src/lexer.mll"
                                   ( Lexing.new_line lexbuf; inside_comment false lexbuf )
# 384 "src/lexer.ml"

  | 3 ->
# 153 "src/lexer.mll"
                                   ( inside_comment false lexbuf )
# 389 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_inside_comment_rec laststar lexbuf __ocaml_lex_state

;;

